{
  "ast": null,
  "code": "import { ApolloServer, gql } from 'apollo-server-micro';\nimport scrap from './scrap'; // prettier-ignore\n// The GraphQL schema\n\nconst typeDefs = gql`\n  type Lyric {\n    element: String\n    content: String\n  }\n  type Song {\n\t\ttitle: String\n    lyrics: [Lyric]\n\t}\n  type Query {\n    \"A simple type for getting started!\"\n    hello: String\n    getSong(id: Int): Song\n  }\n`; // prettier-ignore\n// A map of functions which return data for the schema.\n\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n    getSong: (__, args, _) => {\n      const {\n        id\n      } = args;\n      let a = scrap(id.toString());\n      return a;\n    }\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  introspection: true,\n  playground: true\n});\nexport default server;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/nipeharefa/projects/BNKP/scrapping/src/helper/server.ts"
    ],
    "names": [
      "ApolloServer",
      "gql",
      "scrap",
      "typeDefs",
      "resolvers",
      "Query",
      "hello",
      "getSong",
      "__",
      "args",
      "_",
      "id",
      "a",
      "toString",
      "server",
      "introspection",
      "playground"
    ],
    "mappings": "AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAGF,GAAI;;;;;;;;;;;;;;CAArB,C,CAgBA;AACA;;AACA,MAAMG,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,MAAM,OADR;AAELC,IAAAA,OAAO,EAAE,CAACC,EAAD,EAAKC,IAAL,EAAgBC,CAAhB,KAAsB;AAC7B,YAAM;AAAEC,QAAAA;AAAF,UAASF,IAAf;AACA,UAAIG,CAAC,GAAGV,KAAK,CAACS,EAAE,CAACE,QAAH,EAAD,CAAb;AACA,aAAOD,CAAP;AACD;AANI;AADS,CAAlB;AAWA,MAAME,MAAM,GAAG,IAAId,YAAJ,CAAiB;AAC9BG,EAAAA,QAD8B;AAE9BC,EAAAA,SAF8B;AAG9BW,EAAAA,aAAa,EAAE,IAHe;AAI9BC,EAAAA,UAAU,EAAE;AAJkB,CAAjB,CAAf;AAOA,eAAeF,MAAf",
    "sourcesContent": [
      "import { ApolloServer, gql } from 'apollo-server-micro';\nimport scrap from './scrap';\n\n// prettier-ignore\n// The GraphQL schema\nconst typeDefs = gql`\n  type Lyric {\n    element: String\n    content: String\n  }\n  type Song {\n\t\ttitle: String\n    lyrics: [Lyric]\n\t}\n  type Query {\n    \"A simple type for getting started!\"\n    hello: String\n    getSong(id: Int): Song\n  }\n`;\n\n// prettier-ignore\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => 'world',\n    getSong: (__, args: any, _) => {\n      const { id } = args;\n      let a = scrap(id.toString());\n      return a;\n    }, \n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  introspection: true,\n  playground: true,\n});\n\nexport default server;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
