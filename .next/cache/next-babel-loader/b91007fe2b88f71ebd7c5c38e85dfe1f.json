{
  "ast": null,
  "code": "import cheerio from 'cheerio';\nimport axios from 'axios';\n\nconst sanitazeCherElement = ($, e) => {\n  let t = $(e).text();\n  let b = t.split('\\n');\n  b = b.filter(v => v !== '').map(v => {\n    return v.trim();\n  }).filter(v => v !== '').filter(v => v != 'Play');\n  return b;\n};\n\nconst convertToSongStruct = a => {\n  let el = 'verse';\n\n  if (a[0] === 'Reff:') {\n    el = 'reff';\n  }\n\n  let obj = {\n    element: el,\n    content: a[1]\n  };\n  return obj;\n};\n\nconst main = async id => {\n  try {\n    let data = await axios.get(`https://alkitab.mobi/kidung/kj/${id}`);\n    let htmlData = data.data;\n    let $ = cheerio.load(htmlData);\n    let a = $('p.paragraphtitle');\n    let cc = a.nextUntil('hr');\n    let title = $('title').text().replace(/KJ\\s([0-9]{1,3}\\s-\\s)/, '');\n    let song = {\n      title: '',\n      lyrics: []\n    };\n    song.title = title;\n    cc.each((_, v) => {\n      $(v).each((_, e) => {\n        let b = sanitazeCherElement($, e);\n\n        if (b.length > 0) {\n          let ss = convertToSongStruct(b);\n          song.lyrics.push(ss);\n        }\n      });\n    });\n    return song;\n  } catch (error) {\n    if (true) {\n      throw error;\n    }\n  }\n\n  return {};\n};\n\nexport default main;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/nipeharefa/projects/BNKP/scrapping/src/helper/scrap.ts"
    ],
    "names": [
      "cheerio",
      "axios",
      "sanitazeCherElement",
      "$",
      "e",
      "t",
      "text",
      "b",
      "split",
      "filter",
      "v",
      "map",
      "trim",
      "convertToSongStruct",
      "a",
      "el",
      "obj",
      "element",
      "content",
      "main",
      "id",
      "data",
      "get",
      "htmlData",
      "load",
      "cc",
      "nextUntil",
      "title",
      "replace",
      "song",
      "lyrics",
      "each",
      "_",
      "length",
      "ss",
      "push",
      "error"
    ],
    "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAYA,MAAMC,mBAAmB,GAAG,CAC1BC,CAD0B,EAE1BC,CAF0B,KAGR;AAClB,MAAIC,CAAC,GAAGF,CAAC,CAACC,CAAD,CAAD,CAAKE,IAAL,EAAR;AAEA,MAAIC,CAAC,GAAGF,CAAC,CAACG,KAAF,CAAQ,IAAR,CAAR;AAEAD,EAAAA,CAAC,GAAGA,CAAC,CACFE,MADC,CACOC,CAAD,IAAOA,CAAC,KAAK,EADnB,EAEDC,GAFC,CAEID,CAAD,IAAuB;AAC1B,WAAOA,CAAC,CAACE,IAAF,EAAP;AACD,GAJC,EAKDH,MALC,CAKOC,CAAD,IAAOA,CAAC,KAAK,EALnB,EAMDD,MANC,CAMOC,CAAD,IAAOA,CAAC,IAAI,MANlB,CAAJ;AAQA,SAAOH,CAAP;AACD,CAjBD;;AAmBA,MAAMM,mBAAmB,GAAIC,CAAD,IAAmC;AAC7D,MAAIC,EAAU,GAAG,OAAjB;;AAEA,MAAID,CAAC,CAAC,CAAD,CAAD,KAAS,OAAb,EAAsB;AACpBC,IAAAA,EAAE,GAAG,MAAL;AACD;;AAED,MAAIC,GAAgB,GAAG;AACrBC,IAAAA,OAAO,EAAEF,EADY;AAErBG,IAAAA,OAAO,EAAEJ,CAAC,CAAC,CAAD;AAFW,GAAvB;AAKA,SAAOE,GAAP;AACD,CAbD;;AAeA,MAAMG,IAAI,GAAG,MAAOC,EAAP,IAAsB;AACjC,MAAI;AACF,QAAIC,IAAI,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,kCAAiCF,EAAG,EAA/C,CAAjB;AACA,QAAIG,QAAQ,GAAGF,IAAI,CAACA,IAApB;AAEA,QAAIlB,CAAC,GAAGH,OAAO,CAACwB,IAAR,CAAaD,QAAb,CAAR;AACA,QAAIT,CAAC,GAAGX,CAAC,CAAC,kBAAD,CAAT;AACA,QAAIsB,EAAE,GAAGX,CAAC,CAACY,SAAF,CAAY,IAAZ,CAAT;AAEA,QAAIC,KAAa,GAAGxB,CAAC,CAAC,OAAD,CAAD,CACjBG,IADiB,GAEjBsB,OAFiB,CAET,uBAFS,EAEgB,EAFhB,CAApB;AAIA,QAAIC,IAAU,GAAG;AACfF,MAAAA,KAAK,EAAE,EADQ;AAEfG,MAAAA,MAAM,EAAE;AAFO,KAAjB;AAKAD,IAAAA,IAAI,CAACF,KAAL,GAAaA,KAAb;AAEAF,IAAAA,EAAE,CAACM,IAAH,CAAQ,CAACC,CAAD,EAAItB,CAAJ,KAAU;AAChBP,MAAAA,CAAC,CAACO,CAAD,CAAD,CAAKqB,IAAL,CAAU,CAACC,CAAD,EAAI5B,CAAJ,KAAU;AAClB,YAAIG,CAAC,GAAGL,mBAAmB,CAACC,CAAD,EAAIC,CAAJ,CAA3B;;AAEA,YAAIG,CAAC,CAAC0B,MAAF,GAAW,CAAf,EAAkB;AAChB,cAAIC,EAAE,GAAGrB,mBAAmB,CAACN,CAAD,CAA5B;AACAsB,UAAAA,IAAI,CAACC,MAAL,CAAYK,IAAZ,CAAiBD,EAAjB;AACD;AACF,OAPD;AAQD,KATD;AAWA,WAAOL,IAAP;AACD,GA/BD,CA+BE,OAAOO,KAAP,EAAc;AACd,cAA0C;AACxC,YAAMA,KAAN;AACD;AACF;;AAED,SAAO,EAAP;AACD,CAvCD;;AAyCA,eAAejB,IAAf",
    "sourcesContent": [
      "import cheerio from 'cheerio';\nimport axios from 'axios';\n\ninterface LyricStruct {\n  element: string;\n  content: string;\n}\n\ninterface Song {\n  title: string;\n  lyrics: Array<LyricStruct>;\n}\n\nconst sanitazeCherElement = (\n  $: CheerioStatic,\n  e: CheerioElement\n): Array<string> => {\n  let t = $(e).text();\n\n  let b = t.split('\\n');\n\n  b = b\n    .filter((v) => v !== '')\n    .map((v: string): string => {\n      return v.trim();\n    })\n    .filter((v) => v !== '')\n    .filter((v) => v != 'Play');\n\n  return b;\n};\n\nconst convertToSongStruct = (a: Array<string>): LyricStruct => {\n  let el: string = 'verse';\n\n  if (a[0] === 'Reff:') {\n    el = 'reff';\n  }\n\n  let obj: LyricStruct = {\n    element: el,\n    content: a[1]\n  };\n\n  return obj;\n};\n\nconst main = async (id: string) => {\n  try {\n    let data = await axios.get(`https://alkitab.mobi/kidung/kj/${id}`);\n    let htmlData = data.data;\n\n    let $ = cheerio.load(htmlData);\n    let a = $('p.paragraphtitle');\n    let cc = a.nextUntil('hr');\n\n    let title: string = $('title')\n      .text()\n      .replace(/KJ\\s([0-9]{1,3}\\s-\\s)/, '');\n\n    let song: Song = {\n      title: '',\n      lyrics: []\n    };\n\n    song.title = title;\n\n    cc.each((_, v) => {\n      $(v).each((_, e) => {\n        let b = sanitazeCherElement($, e);\n\n        if (b.length > 0) {\n          let ss = convertToSongStruct(b);\n          song.lyrics.push(ss);\n        }\n      });\n    });\n\n    return song;\n  } catch (error) {\n    if (process.env.NODE_ENV != 'production') {\n      throw error;\n    }\n  }\n\n  return {};\n};\n\nexport default main;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
